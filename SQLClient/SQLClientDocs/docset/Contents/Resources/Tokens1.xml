<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/SQLClient.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/SQLClient</TokenIdentifier>
			<Abstract type="html">Native SQL Server client for iOS. An Objective-C wrapper around the open-source FreeTDS library.</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
            
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SQLClient/setTimeout:</TokenIdentifier>
			<Abstract type="html">Connection timeout, in seconds. Default is 5. Override before calling connect:</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) int timeout</Declaration>
			
			
			<Anchor>//api/name/timeout</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SQLClient/timeout</TokenIdentifier>
			<Abstract type="html">Connection timeout, in seconds. Default is 5. Override before calling connect:</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) int timeout</Declaration>
			
			
			<Anchor>//api/name/timeout</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SQLClient/timeout</TokenIdentifier>
			<Abstract type="html">Connection timeout, in seconds. Default is 5. Override before calling connect:</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) int timeout</Declaration>
			
			
			<Anchor>//api/name/timeout</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SQLClient/setHost:</TokenIdentifier>
			<Abstract type="html">The database server, i.e. server, server:port, or server\instance</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *host</Declaration>
			
			
			<Anchor>//api/name/host</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SQLClient/host</TokenIdentifier>
			<Abstract type="html">The database server, i.e. server, server:port, or server\instance</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *host</Declaration>
			
			
			<Anchor>//api/name/host</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SQLClient/host</TokenIdentifier>
			<Abstract type="html">The database server, i.e. server, server:port, or server\instance</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *host</Declaration>
			
			
			<Anchor>//api/name/host</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SQLClient/setUsername:</TokenIdentifier>
			<Abstract type="html">The database username</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *username</Declaration>
			
			
			<Anchor>//api/name/username</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SQLClient/username</TokenIdentifier>
			<Abstract type="html">The database username</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *username</Declaration>
			
			
			<Anchor>//api/name/username</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SQLClient/username</TokenIdentifier>
			<Abstract type="html">The database username</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *username</Declaration>
			
			
			<Anchor>//api/name/username</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SQLClient/setPassword:</TokenIdentifier>
			<Abstract type="html">The database password</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *password</Declaration>
			
			
			<Anchor>//api/name/password</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SQLClient/password</TokenIdentifier>
			<Abstract type="html">The database password</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *password</Declaration>
			
			
			<Anchor>//api/name/password</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SQLClient/password</TokenIdentifier>
			<Abstract type="html">The database password</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *password</Declaration>
			
			
			<Anchor>//api/name/password</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SQLClient/setDatabase:</TokenIdentifier>
			<Abstract type="html">The database name to use</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *database</Declaration>
			
			
			<Anchor>//api/name/database</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SQLClient/database</TokenIdentifier>
			<Abstract type="html">The database name to use</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *database</Declaration>
			
			
			<Anchor>//api/name/database</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SQLClient/database</TokenIdentifier>
			<Abstract type="html">The database name to use</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *database</Declaration>
			
			
			<Anchor>//api/name/database</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SQLClient/setDelegate:</TokenIdentifier>
			<Abstract type="html">The delegate to receive error: and message: callbacks</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) NSObject&lt;SQLClientDelegate&gt; *delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SQLClient/delegate</TokenIdentifier>
			<Abstract type="html">The delegate to receive error: and message: callbacks</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) NSObject&lt;SQLClientDelegate&gt; *delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SQLClient/delegate</TokenIdentifier>
			<Abstract type="html">The delegate to receive error: and message: callbacks</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) NSObject&lt;SQLClientDelegate&gt; *delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SQLClient/setWorkerQueue:</TokenIdentifier>
			<Abstract type="html">The queue for database operations. By default, uses a new queue called &apos;com.martinrybak.sqlclient&apos; created upon singleon intialization. Can be overridden.</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSOperationQueue *workerQueue</Declaration>
			
			
			<Anchor>//api/name/workerQueue</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SQLClient/workerQueue</TokenIdentifier>
			<Abstract type="html">The queue for database operations. By default, uses a new queue called &apos;com.martinrybak.sqlclient&apos; created upon singleon intialization. Can be overridden.</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSOperationQueue *workerQueue</Declaration>
			
			
			<Anchor>//api/name/workerQueue</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SQLClient/workerQueue</TokenIdentifier>
			<Abstract type="html">The queue for database operations. By default, uses a new queue called &apos;com.martinrybak.sqlclient&apos; created upon singleon intialization. Can be overridden.</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSOperationQueue *workerQueue</Declaration>
			
			
			<Anchor>//api/name/workerQueue</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SQLClient/setCallbackQueue:</TokenIdentifier>
			<Abstract type="html">The queue for block callbacks. By default, uses the current queue upon singleton initialization. Can be overridden.</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) NSOperationQueue *callbackQueue</Declaration>
			
			
			<Anchor>//api/name/callbackQueue</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SQLClient/callbackQueue</TokenIdentifier>
			<Abstract type="html">The queue for block callbacks. By default, uses the current queue upon singleton initialization. Can be overridden.</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) NSOperationQueue *callbackQueue</Declaration>
			
			
			<Anchor>//api/name/callbackQueue</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SQLClient/callbackQueue</TokenIdentifier>
			<Abstract type="html">The queue for block callbacks. By default, uses the current queue upon singleton initialization. Can be overridden.</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) NSOperationQueue *callbackQueue</Declaration>
			
			
			<Anchor>//api/name/callbackQueue</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SQLClient/sharedInstance</TokenIdentifier>
			<Abstract type="html">Returns an initialized SQLClient instance as a singleton</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>+ (id)sharedInstance</Declaration>
			
			<ReturnValue><Abstract type="html">Shared SQLClient object</Abstract></ReturnValue>
			<Anchor>//api/name/sharedInstance</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SQLClient/connect:username:password:database:completion:</TokenIdentifier>
			<Abstract type="html">Connects to a SQL database server</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>- (void)connect:(NSString *)host username:(NSString *)username password:(NSString *)password database:(NSString *)database completion:(void ( ^ ) ( BOOL success ))completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>host</Name>
					<Abstract type="html">Required. The database server, i.e. server, server:port, or server\instance</Abstract>
				</Parameter><Parameter>
					<Name>username</Name>
					<Abstract type="html">Required. The database username</Abstract>
				</Parameter><Parameter>
					<Name>password</Name>
					<Abstract type="html">Required. The database password</Abstract>
				</Parameter><Parameter>
					<Name>database</Name>
					<Abstract type="html">Required. The database name</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">Block to be executed upon method successful connection</Abstract>
				</Parameter><Parameter>
					<Name>delegate</Name>
					<Abstract type="html">Required. An NSObject that implements the SQLClientDelegate protocol for receiving error messages</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/connect:username:password:database:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SQLClient/connected</TokenIdentifier>
			<Abstract type="html">Indicates whether the database is currently connected</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>- (BOOL)connected</Declaration>
			
			
			<Anchor>//api/name/connected</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SQLClient/execute:completion:</TokenIdentifier>
			<Abstract type="html">Executes a SQL statement. Results of queries will be passed to the completion handler. Inserts, updates, and deletes do not return results.</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>- (void)execute:(NSString *)sql completion:(void ( ^ ) ( NSArray *results ))completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>sql</Name>
					<Abstract type="html">Required. A SQL statement</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">Block to be executed upon method completion. Accepts an NSArray of tables. Each table is an NSArray of rows. Each row is an NSDictionary of columns where key = name and object = value as an NSString.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/execute:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SQLClient/disconnect</TokenIdentifier>
			<Abstract type="html">Disconnects from database server</Abstract>
			<DeclaredIn>SQLClient.h</DeclaredIn>
			
			<Declaration>- (void)disconnect</Declaration>
			
			
			<Anchor>//api/name/disconnect</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
        
	</File>
</Tokens>